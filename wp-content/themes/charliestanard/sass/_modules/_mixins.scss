//  -----------------------------------------------------------------
//	MIXINS: Media queries
//  -----------------------------------------------------------------

@mixin respond($media, $type: "min") {
	@if $media == "xs" {
		@media ($type+"-width": $break-xs) {
			@content;
		}
	}
	@else if $media == "sm" {
		@media ($type+"-width": $break-sm) {
			@content;
		}
	}
	@else if $media == "md" {
		@media ($type+"-width": $break-md) {
			@content;
		}
	}
	@else if $media == "lg" {
		@media ($type+"-width": $break-lg) {
			@content;
		}
	}
	@else {
		@media ($type+"-width": $media) {
			@content;
		}
	}

}

@mixin respond-minmax($min,$max) {
    @media (min-width:$min) and (max-width: $max) {
    	@content;
    }
 }

@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 1.5),
	only screen and (min--moz-device-pixel-ratio: 1.5) {
		@content;
	}
}

@mixin retina-bg ($path, $width:0, $height:0) {
	@include retina {
		background-image: url($path);

		@if ($width != 0) {
			background-size: $width $height;
		}
	}
}

//  -----------------------------------------------------------------
//	MIXINS: Layout
//  -----------------------------------------------------------------

@mixin wrap {
	margin: 0 auto;
	min-height: 1px;
	padding: 0;
	position: relative;
	width: 100%;
}

@mixin section ($paddingTop:60px, $paddingBottom:45px, $sidePadding:true, $useDefaultPadding:true) {
	@include wrap;
	@extend %cf;
	padding-top: $paddingTop;
	padding-bottom: $paddingBottom;

	@if $sidePadding == true {
		padding-right: 3%;
		padding-left: 3%;
	}

	@include respond($break-phone2) {
		@if $useDefaultPadding == true {
			padding-top: 90px;
			padding-bottom: 60px;
		}
	}

	@include respond($break-desktop2) {
		max-width: $content-width + px;
		padding-left: 15px;
		padding-right: 15px;

		@if $useDefaultPadding == true {
			padding-top: 120px;
			padding-bottom: 90px;
		}
	}
}

// When passing in width values do not include "px" at the end
@mixin column($width:480, $parentWidth:940, $marginLeft:0, $marginRight:0, $paddingTop:30px, $paddingBottom:30px, $breakPoint:$break-phone2) {
	min-height: 1px;
	padding-bottom: 0;
	padding-top: 0;
	position: relative;

	@include respond($breakPoint) {
		float: left;
		margin-left: percentage($marginLeft/$parentWidth);
		margin-right: percentage($marginRight/$parentWidth);
		padding-top: $paddingTop;
		padding-bottom: $paddingBottom;
		width: percentage($width/$parentWidth);
	}
}

//  -----------------------------------------------------------------
//	MIXINS: Type
//  -----------------------------------------------------------------

@mixin font-size($sizeValue: 1.6) {
	font-size: ($sizeValue * 10) + px;
	font-size: $sizeValue + rem;
}

@mixin line-height($sizeValue: 2.2) {
	line-height: ($sizeValue * 10) + px;
	line-height: $sizeValue + rem;
}

@mixin fslh($sizeValue: 1.6, $lineHeight: 2.2) {
	font-size: ($sizeValue * 10) + px;
	font-size: $sizeValue + rem;
	line-height: ($lineHeight * 10) + px;
	line-height: $lineHeight + rem;
}

@mixin button($fontSize: 1.5, $lineHeight: 3.5, $height: 38px, $color: $primary-color, $secondaryColor: $primary-color-dark, $ghost: false, $arrow: false, $padding: 22px) {

	display: inline-block;
	position: relative;
	height: auto;
	margin-left: auto;
	margin-right: auto;
	min-height: $height;
	padding-bottom: 12px;
	padding-left: $padding;
	padding-right: $padding;
	padding-top: 12px;
	width: auto;

	@include font-size($fontSize);
	@include line-height(1.5);
	background-color: $color;
	border: 1px solid $color;
	border-radius: 0;
	color: $secondaryColor;
	cursor: pointer;
	font-weight: 700;
	outline: none;
	text-align: center;
	text-decoration: none;
	text-transform: uppercase;

	&:hover,
	&:active {
		background-color: $secondaryColor;
		border: 1px solid $color;
		color: $color;
	}

	// Button modifiers

	@if $ghost == true {
		background: transparent;
		border: 1px solid $color;
		color: $color;

		&:hover,
		&:active {
			background-color: $color;
			color: $secondaryColor;
		}
	}

	@if $arrow == true {
		padding-right: 30px;

		&:after {
			@include font-size(1.8);
			bottom: 13px;
			content: "\203a";
			display: block;
			position: absolute;
			right: 18px;
		}
	}
}

//  -----------------------------------------------------------------
//	MIXINS: Image sprites
//  -----------------------------------------------------------------

/*

	1. Mixins originally generated by spritesmith, but with a fix to account for the sprite SASS' relative path to the images directory being incorrect when compiled to CSS and the site.css relative path to the images directory

		Generated: ../../images (since _sprites.scss two directories down from root)
		Correct: ../images (since site.css one directory down from root)

	2. 1x-scaled sprites do not create coordinates as precise as 2x / 2

*/

@mixin sprite-width($sprite) {
	width: nth($sprite, 5) / 2;
}

@mixin sprite-height($sprite) {
	height: nth($sprite, 6) / 2;
}

@mixin sprite-position($sprite) {
	$sprite-offset-x: nth($sprite, 3) / 2;
	$sprite-offset-y: nth($sprite, 4) / 2;
	background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
	$sprite-image: nth($sprite, 9);
	// background-image: url(#{$sprite-image}); // spritesmith-generated relative path incorrect
	background-image: url('../images/campaign_name_sprite.png');
}

@mixin sprite($sprite) {
	display: inline-block;
	@include sprite-image($sprite);
	@include sprite-position($sprite);
	@include sprite-width($sprite);
	@include sprite-height($sprite);

	$sprite-width: nth($sprite, 7) / 2;
	$sprite-height: nth($sprite, 8) / 2;
	@include retina-bg('../images/campaign_name_sprite@2x.png', $sprite-width, $sprite-height)
}